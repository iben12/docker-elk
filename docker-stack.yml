version: '3.3'

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.1
    ports:
      - "9200:9200"
      - "9300:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    volumes:
    - elastic-data:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms256m"
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  logstash:
    image: docker.elastic.co/logstash/logstash-oss:6.6.1
    ports:
      - target: 5201
        published: 5000
        protocol: udp
      - "9600:9600"
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  logspout:
    image: bekt/logspout-logstash
    environment:
      - "ROUTE_URIS=logstash://logstash:5201"
      - "DOCKER_LABELS=on"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/hostname:/etc/host_hostname:ro
    networks:
      - elk
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  curator:
    image: bobrik/curator
    command:
      - "--config"
      - "/opt/curator_config.yml"
      - "/opt/curator_action.yml"
    configs:
      - source: curator_config
        target: /opt/curator_config.yml
      - source: curator_action
        target: /opt/curator_action.yml
    environment:
      - "DAYS_TO_KEEP=5"
    networks:
      - elk
    deploy:
      replicas: 0
      restart_policy:
        condition: none
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=0 5 1 * * *"
        - "swarm.cronjob.skip-running=false"

  kibana:
    image: iben12/kibana:6.6.1
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.backend=kibana"
        - "traefik.enable=true"
        - "traefik.docker.network=elk"
        - "traefik.port=5601"
        - "traefik.frontend.auth.basic=${KIBANA_USER}"
        - "traefik.frontend.rule=Host:kibana.elk.skizoidglam.net"

  elastalert:
    image: bitsensor/elastalert:latest
    configs:
      - source: elastalert_config
        target: /opt/elastalert/config.yaml
      - source: elastalert_test_config
        target: /opt/elastalert/config-test.yaml
      - source: elastalert_config_json
        target: /opt/elastalert-server/config/config.json

    volumes:
      - elastalert-rules:/opt/elastalert/rules
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  traefik:
    image: traefik:latest
    command:
      - "--api"
      - "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
      - "--entrypoints=Name:https Address::443 TLS"
      - "--defaultentrypoints=http,https"
      - "--acme"
      - "--acme.storage=/etc/traefik/acme/acme.json"
      - "--acme.entryPoint=https"
      - "--acme.httpChallenge.entryPoint=http"
      - "--acme.onHostRule=true"
      - "--acme.onDemand=false"
      - "--acme.email=${ACME_EMAIL}"
      - "--docker"
      - "--accessLog"
      - "--accessLog.format=json"
      - "--docker.swarmMode"
      - "--docker.domain=elk.skizoidglam.net"
      - "--docker.watch"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/acme/acme.json:/etc/traefik/acme/acme.json
    networks:
      - elk
      - traefik
    ports:
      - target: 80
        published: 80
        mode: ingress
      - target: 443
        published: 443
        mode: ingress
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.backend=elk_traefik"
        - "traefik.enable=true"
        - "traefik.port=8080"
        - "traefik.frontend.rule=Host:traefik.elk.skizoidglam.net"

  cronjob:
    image: crazymax/swarm-cronjob
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "TZ=Europe/Budapest"
      - "LOG_LEVEL=info"
      - "LOG_JSON=true"
    deploy:
      placement:
        constraints:
          - node.role == manager

  sematext:
    image: 'sematext/sematext-agent-docker:latest'
    environment:
      - LOGSENE_TOKEN=$LOGSENE_TOKEN
      - SPM_TOKEN=$SPM_TOKEN
      - SPM_RECEIVER_URL=https://spm-receiver.eu.sematext.com/receiver/v1
      - LOGSENE_RECEIVER_URL=https://logsene-receiver.eu.sematext.com
      - EVENTS_RECEIVER_URL=https://event-receiver.eu.sematext.com
      - affinity:container!=*sematext-agent*
    cap_add:
      - SYS_ADMIN
    restart: always
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: /
        target: /rootfs:ro

configs:
  elastic_config:
    file: ./elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./logstash/config/logstash.yml
  logstash_pipeline:
    file: ./logstash/pipeline/logstash.conf
  kibana_config:
    file: ./kibana/config/kibana.yml
  elastalert_config:
    file: ./elastalert/config/elastalert.yaml
  elastalert_test_config:
    file: ./elastalert/config/elastalert.yaml
  elastalert_config_json:
    file: ./elastalert/config/config.json
  curator_config:
    file: ./curator/config.yml
  curator_action:
    file: ./curator/action.yml

networks:
  elk:
    driver: overlay
  traefik:
    driver: overlay

volumes:
  elastic-data:
  elastalert-rules:

